#include "crypto_system.h"
#include <iostream>
#include <string>
#include <vector>

using namespace std;

// --- CLI helpers ---
string getArg(int argc, char* argv[], const string& name) {
    for (int i = 1; i < argc - 1; ++i) {
        if (argv[i] == name)
            return argv[i + 1];
    }
    return "";
}
bool hasFlag(int argc, char* argv[], const string& flag) {
    for (int i = 1; i < argc; ++i) if (argv[i] == flag) return true;
    return false;
}

// CLI-—Ä–µ–∂–∏–º
int cliMode(int argc, char* argv[]) {
    string cipher = getArg(argc, argv, "--cipher");
    bool encrypt = hasFlag(argc, argv, "-e") || hasFlag(argc, argv, "--encrypt");
    bool decrypt = hasFlag(argc, argv, "-d") || hasFlag(argc, argv, "--decrypt");
    string input = getArg(argc, argv, "--input");
    string output = getArg(argc, argv, "--output");
    string key = getArg(argc, argv, "--key");
    string iv = getArg(argc, argv, "--iv"); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è AES

    if (cipher.empty() || input.empty() || output.empty() || key.empty() || (!encrypt && !decrypt)) {
        cout << "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n";
        cout << "–ü—Ä–∏–º–µ—Ä:\n./crypto_app --cipher rc4 -e --input input.txt --output enc.dat --key secret\n";
        cout << "–ê–ª–≥–æ—Ä–∏—Ç–º—ã: rc4, aes, binvig\n";
        cout << "–§–ª–∞–≥–∏: -e (encrypt), -d (decrypt)\n";
        return 1;
    }

    CryptoSystem system;
    vector<unsigned char> data = system.readBinaryFile(input);
    if (data.empty()) {
        cout << "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " << input << endl;
        return 2;
    }

    if (cipher == "rc4") {
        if (encrypt) system.rc4Encrypt(data, key);
        if (decrypt) system.rc4Decrypt(data, key);
    } else if (cipher == "aes") {
        if (encrypt) system.aesCfbEncrypt(data, key); // IV –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (decrypt) system.aesCfbDecrypt(data, key);
    } else if (cipher == "binvig" || cipher == "binary_vigenere") {
        if (encrypt) system.binaryVigenereEncrypt(data, key);
        if (decrypt) system.binaryVigenereDecrypt(data, key);
    } else {
        cout << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: " << cipher << endl;
        return 3;
    }

    system.writeBinaryFile(output, data);
    cout << "–ì–æ—Ç–æ–≤–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ " << output << endl;
    return 0;
}

int main(int argc, char* argv[]) {
    setlocale (LC_ALL, "");
    // --- CLI-—Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
    if (argc > 1) {
        return cliMode(argc, argv);
    }

    // --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥) ---
    CryptoSystem system;
    int choice;
    
    do {
        system.showMenu();
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–í–û–î
        if (!(cin >> choice)) {
            cin.clear();
            cin.ignore(10000, '\n');
            choice = -1;
        }
        cin.ignore(); // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
        
        switch (choice) {
            case 1:
                system.inputTextToFile();
                break;
            case 2:
                system.encryptFile();
                break;
            case 3:
                system.decryptFile();
                break;
            case 4:
                system.displayFile();
                break;
            case 5:
                system.createTestFiles();
                break;
            case 0:
                cout << "\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" << endl;
                break;
            default:
                cout << "\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." << endl;
                cout << "üìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...";
                cin.get();
                break;
        }
        
    } while (choice != 0);
    
    return 0;
}